import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import os

# assign directory
directory = r'C:\Users\1365967\Downloads\CPMS'

# iterate over files in
# that directory
for filename in os.scandir(directory):
    if filename.is_file():
        fpath = (filename.path)
        substring = fpath[32:38]


        # Step 1: Prepare your data
        data = pd.read_csv(fpath)

        # Extract month and year from the date column
        data['Date'] = pd.to_datetime(data['Date'])
        data['Month'] = data['Date'].dt.month
        data['Year'] = data['Date'].dt.year

        # Create dummy variables for each month
        dummy_months = pd.get_dummies(data['Month'], prefix='Month', drop_first=True)

        # Concatenate the original data with the dummy variables
        data_with_seasonality = pd.concat([data, dummy_months], axis=1)

        X = data_with_seasonality[['Age of Vehicle', 'Month_2', 'Month_3', 'Month_4', 'Month_5', 'Month_6',
                                   'Month_7', 'Month_8', 'Month_9', 'Month_10', 'Month_11', 'Month_12']]
        y = data_with_seasonality['Cost per Mile']

        # Step 2: Split the data into training and testing sets
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Step 3: Build the regression model
        model = LinearRegression()

        # Step 4: Fit the model
        model.fit(X_train, y_train)

        # Step 5: Validate the model
        y_pred_train = model.predict(X_train)  # Predicted values on the training set
        mse_train = mean_squared_error(y_train, y_pred_train)
        #print("Mean Squared Error (Training):", mse_train)

        y_pred_test = model.predict(X_test)  # Predicted values on the testing set
        mse_test = mean_squared_error(y_test, y_pred_test)
        #print("Mean Squared Error (Testing):", mse_test)

        # Get the age range to start and stop from the file
        startage = data['Age of Vehicle'].iloc[-1]+1
        endage = startage + 12
        agerange = np.arange(startage, endage, 1)

        # Step 6: Forecast future costs with seasonality
        future_ages = pd.DataFrame({'Age of Vehicle': agerange})
        future_months = pd.DataFrame({'Month': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]})
        dummy_future_months = pd.get_dummies(future_months['Month'], prefix='Month', drop_first=True)
        future_data = pd.concat([future_ages, dummy_future_months], axis=1)

        future_costs = model.predict(future_data)
        forecast_data = pd.DataFrame({'Age of Vehicle': future_data['Age of Vehicle'],
                                      'Forecasted Cost per Mile': future_costs, 'model' : substring})

        forecast_data.to_csv(r'C:\Users\1365967\Downloads\results.txt', mode='a')
